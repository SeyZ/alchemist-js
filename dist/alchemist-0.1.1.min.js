// Alchemist.js v0.1.1 | license: MIT
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):"object"==typeof exports?exports.Alchemist=e():t.Alchemist=e()}(this,function(){return function(t){function e(o){if(r[o])return r[o].exports;var n=r[o]={exports:{},id:o,loaded:!1};return t[o].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){var o=r(1),n=r(2),i=r(3);Color=function(t,e,r){r=r||{},this.color_space=t,this.value=e,this.white=r.white||{X:.95047,Y:1,Z:1.08883}};var s=function(t){t=t||{},this.spaces={},this.abstract_spaces={},this.white=t.white||null,this.precision=t.precision||4};i.mixin(s.prototype,o),i.mixin(s.prototype,n),s.create=function(t){return new s(t)},s.prototype.Alchemist=s,s.Color=s.prototype.Color=Color,s.prototype.use=function(t){if(i.isArray(t))for(var e=0;e<t.length;e++)this.use(t[e]);else if(t.to||t.from)this.defineColorSpace(t),this.makeColorMethod(t.name);else{if(!t.modifies)throw new Error("unrecognized plugin format");this.defineTransform(t)}},s.prototype.removeAll=function(){this.spaces={},this.abstract_spaces={}},s.prototype.makeColorMethod=function(t){this[t]=function(e){var r;if(arguments.length>1)var r=Array.prototype.slice.call(arguments);else var r=e;var o=new this.Color(t,r,{white:this.white});for(var n in this.spaces)this.makeConversionMethod(o,n);return o}},s.prototype.makeConversionMethod=function(t,e){var r=this;t[e]=function(){return r.round(r.convert(t,e).value)}},s.prototype.convert=function(t,e){var r,o,n,s,a=this.findColorSpace(t.color_space),c=this.findColorSpace(e);if(!a)throw new Error("Internal Error: could not find the "+current+" color space");if(!c)throw new Error("Internal Error: could not find the "+e+" color space");if(r=a.to[e],"function"==typeof r)return o=i.isArray(t.value)?r.apply(this,i.attemptClone(t.value).concat(t)):r(i.attemptClone(t.value),t),o=this.round(o),t.color_space=e,t.value=o,t;if("string"==typeof r)return n=this.convert(t,r),this.convert(n,e);if(s=this.mapConversionPath(t.color_space,e))return this.convert(t,e);throw new Error("Alchemist does not know how to convert from "+t.color_space+" to "+e)},s.prototype.round=function(t){if(i.isArray(t))for(var e=0;e<t.length;e++)t[e]=this.roundIfNumber(t[e]);else t=this.roundIfNumber(t);return t},s.prototype.roundIfNumber=function(t){return"number"==typeof t&&(t=Number(t.toFixed(this.precision))),t},t.exports=s},function(t){var e={};e.findConversionPath=function(t,e){var r=[],o=[],n={};for(r.push(t),o.push(t);r.length;){var i=r.pop();if(i===e)return n;for(var s=this.findNeighbors(i),a=0;a<s.length;a++){var c=s[a];-1===o.indexOf(c)&&(n[c]=i,o.push(c),r.push(c))}}return null},e.findNeighbors=function(t){var e=[],r=this.spaces[t].to;for(conv_space in r)"function"==typeof r[conv_space]&&e.push(conv_space);return e},e.mapConversionPath=function(t,e){var r=this.findConversionPath(t,e);if(!r)return null;for(var o=r[e],n=r[o],i=0;100>i;){if(this.spaces[n].to[e]&&"function"==typeof this.spaces[n].to[e]||(this.spaces[n].to[e]=o),n===t)return o;if(!r[n])return null;o=n,n=r[n],i++}throw new Error("something went wrong while mapping the path from"+t+" to "+e)},e.defineColorSpace=function(t){var e=t.name;this.validateName(e),this.isAbstractSpace(e)?this.makeConcrete(e):this.createSpace(e);for(var r in t.to){var o=t.to[r];this.isColorSpace(r)?this.defineConversion(e,r,o):this.defineAbstractConversion(r,e,"from",o)}for(var r in t.from){var o=t.from[r];this.isColorSpace(r)?this.defineConversion(r,e,o):this.defineAbstractConversion(r,e,"to",o)}},e.defineConversion=function(t,e,r){this.spaces[t].to[e]=r},e.defineAbstractConversion=function(t,e,r,o){var n=this.abstract_spaces;n[t]||this.createAbstractSpace(t),n[t][r][e]=o},e.validateName=function(t){if(this[t])throw this.spaces[t]?new Error('"'+t+'" Already Exists: there is a space with the same name already in use'):new Error("Invalid Name:",t,"is already the name of one of alchemist's private functions and can not be used as a the name of an color space")},e.createSpace=function(t){this.spaces[t]={to:{}}},e.isColorSpace=function(t){return Boolean(this.spaces[t])},e.createAbstractSpace=function(t){this.abstract_spaces[t]={to:{},from:{}}},e.isAbstractSpace=function(t){return Boolean(this.abstract_spaces[t])},e.makeConcrete=function(t){var e=this.abstract_spaces[t];delete this.abstract_spaces[t],e.name=t,this.defineColorSpace(e)},e.findColorSpace=function(t){return this.spaces[t]||null},t.exports=e},function(t){var e={};e.defineModifier=function(){throw new Error("Modifiers are not yet implemented")},t.exports=e},function(t,e){e.mixin=function(t,e){if(arguments[2])for(var r=2,o=arguments.length;o>r;r++)t[arguments[r]]=e[arguments[r]];else for(var n in e)Object.hasOwnProperty.call(t,n)||(t[n]=e[n]);return t},e.clone=function(t){var e=t.constructor;if("string"==typeof t||"number"==typeof t)return new e(t);if(isArray(t)){for(var r=[],o=0;o<t.length;o++)r[o]=t[o];return r}return"object"==typeof t?mixin({},t):null},e.attemptClone=function(t){var e=this.clone(t);return e||t},e.isArray=function(t){return Array.isArray(t)}}])});